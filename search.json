[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Funix Library",
    "section": "",
    "text": "Funix Library\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 25, 2025\n\n\nJ004-Siddhartha Hrishikesha Voleti, Vansh Lata, Madhvikaben Vasava\n\n\n\n\n\n\n\n\n\n\n\n\nSimple Visualisation\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Funix Library",
    "section": "",
    "text": "Overview about Funix\nFunix is a python library which converts a python function or class definition into a webapp. Anything that has to be displayed on the screen has to be returned as a function(other than the text which is used for taking an input from the user). Python objects get mapped to a widget through funix. This happens without manual widget creation in most cases, using its inbuilt type-to-widget mapping system.\nTake a look at a basic python program which displays a person’s name on the screen after taking it as an input on the webapp.\nimport funix\ndef name(enter_your_name:str)-&gt;str:\n    n=enter_your_name\n    return n\nThis is its webapp: \nThe following is another program which has two functions. We call the first function inside the second one.\nimport funix\ndef No_of_characters_in_your_name(enter_your_name:str)-&gt;int:\n    return len(enter_your_name)\n\ndef Calculate_Cost(Enter_your_name:str)-&gt;str:\n    r=8\n    n=No_of_characters_in_your_name(Enter_your_name)\n    return(f\"Cost of painting your name on the wall is: {r*n}Rs.\")\nOn the Webapp:  \nNote: When we have multiple functions called independently(not nested), they appear separately on a menu bar on the left side of the page and have to be opened and executed separately.\n\n\nFor obtaining the webapp for a python program:\n\nFirst run the python file\nOn your terminal run the following program: funix {path_to_the_python_file_as_a_string}\n\nThe same steps have been showed on a VS Code Terminal in the image below \n\n\nProgram for Plotting graphs\nThe following is a python program for choosing a function(out of three functions- sine,cosine and tangent), which also allows the user to set the amplitude(A), wave number(k), phase constant(c) for the function and the color of the graph(out of four choices).\nimport funix\nimport matplotlib.pyplot as plt\nimport matplotlib.figure\nimport numpy\n\ndef Plot_Graphs(Function: funix.hint.Literal['A*tan(kx+c)', 'A*sin(kx+c)', \"A*cos(kx+c)\"],A: funix.hint.FloatSlider(0, 8, 0.1), k: funix.hint.FloatSlider(0, 10, 0.1), c: funix.hint.FloatSlider(0, 2*numpy.pi, 0.01),Colour: funix.hint.Literal['Blue', 'Green', 'Red','Black','Purple']) -&gt; matplotlib.figure.Figure:\n    fig=plt.figure()\n    fn=Function\n    x = numpy.linspace(0, 20, 200)\n    if fn==\"A*tan(kx+c)\":\n        plt.plot(x,A*(numpy.tan((k*x)+c)),color=Colour)\n        plt.ylabel(f\"{A}tan({k}x+{c})\")\n    elif fn==\"A*sin(kx+c)\":\n        plt.plot(x,A*(numpy.sin((k*x)+c)),color=Colour)\n        plt.ylabel(f\"{A}sin({k}x+{c})\")\n    else:\n        plt.plot(x,A*(numpy.cos((k*x)+c)),color=Colour)\n        plt.ylabel(f\"{A}cos({k}x+{c})\")\n    plt.xlabel(\"X-axis\")\n    \n    return fig\nThis is how the webpage for it looks: \nLet’s take a few points to note about the above program: 1. In the function definition line of the above program: python     def Plot_Graphs(Function: funix.hint.Literal['A*tan(kx+c)', 'A*sin(kx+c)', \"A*cos(kx+c)\"],A: funix.hint.FloatSlider(0, 8, 0.1), k: funix.hint.FloatSlider(0,       10, 0.1), c: funix.hint.FloatSlider(0, 2*numpy.pi, 0.01),Colour: funix.hint.Literal['Blue', 'Green', 'Red','Black','Purple']) -&gt; matplotlib.figure.Figure: The -&gt;matplotlib.figure.Figure: specifies that the function has to return a matplotlib.figure.Figure object.\n\nIn the following line: A: funix.hint.FloatSlider(0, 8, 0.1), k: funix.hint.FloatSlider(0, 10, 0.1), c: funix.hint.FloatSlider(0, 2*numpy.pi, 0.01) A, k, and c are the float values set using the slider in the webpage.\nand similarly in Function: funix.hint.Literal['A*tan(kx+c)', 'A*sin(kx+c)', \"A*cos(kx+c)\"] the variable Function stores the string variable chosen using the circle checkboxes in the webpage.\nThese parameters are used to plot the graphs using the matplotlib.figure, matplotlib.pyplot and numpy libraries.\n\n\n\nPlotting a Dataframe\nTake a look at the following program which plots a dataframe and a graph\nimport pandas, matplotlib.pyplot\nfrom numpy import arange, log\nfrom numpy.random import random\n\ndef table_and_plot(\n    df: pandas.DataFrame = pandas.DataFrame({\n        \"a\": arange(500),\n        \"b\": log(arange(500)+1) })\n    ) -&gt; matplotlib.figure.Figure:\n\n    fig = matplotlib.pyplot.figure()\n    matplotlib.pyplot.plot(df[\"a\"], df[\"b\"], 'b')\n\n    return fig\n\n\n\nimage\n\n\nIn this program, we are plotting the values of column a along the X-axis and b=log(a) along the y-axis. The matplotlib.pyplot() function which is being used to plot the graph using the 2 columns of the dataframe also plots the 2 columns as a table. The four columns in the heading are the default columns which appear when displaying the rows of a dataframe using matplotlib.pyplot().\n\n\nDisadvantages of funix\n\nOn the webapp, the functions have to be executed manually by entering the input and clicking on the “RUN” button. We cannot control the number of times the functions are executed through the program. This causes limitations in many situations. For e.g: In the above program for plotting graphs in the webapp, to plot multiple graphs on the same figure along with taking inputs for the various parameters. However for that we would want the function to run in a for loop wherein the user enters all parameters each time and we display a single figure after the end of the loop with all the graphs. But, that is not possible as we cannot control the number of times the function runs through the program.\nSince funix maps objects to pre-defined widgets, it provides very minimal control over the widget elements to the programmer\nAlso, Funix doesn’t have any native library of its own, thus providing very basic functions.\n\n\n\nComparison of funix with Streamlit and Gradio libraries\n\n\n\n\n\n\n\n\nFunix\nGradio\nStreamlit\n\n\n\n\nUI Generation is fully automatic\nSome blocks are predefined while some are manually placed\nManual widget placement\n\n\nCustomisation is very limited as it’s fully automatic\nCustomisation is limited to Gradio Components\nCSS themes and HTML codes allow huge scope for customisation\n\n\nSession-less\nIt is session based\nIt has reactive script reruns\n\n\n\nFunix is much easier to use that the Streamlit and Gradio because of its fully automatic UI generation features."
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisation",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Expository Assignment-Funix Library",
    "section": "",
    "text": "Blog by Group J004"
  }
]