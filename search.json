[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Quarto Blog",
    "section": "",
    "text": "Funix Library\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 25, 2025\n\n\nJ004-Siddhartha Hrishikesha Voleti, Vansh Lata, Madhvikaben Vasava\n\n\n\n\n\n\n\n\n\n\n\n\nSimple Visualisation\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Funix Library",
    "section": "",
    "text": "Dataframe\nimport pandas, matplotlib.pyplot\nfrom numpy import arange, log\nfrom numpy.random import random\n\ndef table_and_plot(\n    df: pandas.DataFrame = pandas.DataFrame({\n        \"a\": arange(500) + random(500)/5,\n        \"b\": random(500)-0.5 + log(arange(500)+1),\n        \"c\": log(arange(500)+1) })\n    ) -&gt; matplotlib.figure.Figure:\n\n    fig = matplotlib.pyplot.figure()\n    matplotlib.pyplot.plot(df[\"a\"], df[\"b\"], 'b')\n    matplotlib.pyplot.plot(df[\"a\"], df[\"c\"], 'r')\n\n    return fig\nI can also write math equations:\n\\[\ny = x^2\n\\]\nI can create lists easily:\n\nOne\nTwo\n\nI can also create numbered lists:\n\nOne\nTwo\n\nOr, create a table:\n\n\n\nName\nAge\n\n\n\n\nAlice\n20\n\n\nBob\n21\n\n\n\n\n\nProgram for Plotting graphs\nA program for choosing a function(out of three functions- sine,cosine and tangent), which also allows the user to set the amplitude(A), wave number(k), phase constant(c) for the function and the color of the graph(out of four choices).\nimport funix\nimport matplotlib.pyplot as plt\nimport matplotlib.figure\nimport numpy\n\ndef Plot_Graphs(Function: funix.hint.Literal['A*tan(kx+c)', 'A*sin(kx+c)', \"A*cos(kx+c)\"],A: funix.hint.FloatSlider(0, 8, 0.1), k: funix.hint.FloatSlider(0, 10, 0.1), c: funix.hint.FloatSlider(0, 2*numpy.pi, 0.01),Colour: funix.hint.Literal['Blue', 'Green', 'Red','Black','Purple']) -&gt; matplotlib.figure.Figure:\n    fig=plt.figure()\n    fn=Function\n    x = numpy.linspace(0, 20, 200)\n    if fn==\"A*tan(kx+c)\":\n        plt.plot(x,A*(numpy.tan((k*x)+c)),color=Colour)\n        plt.ylabel(f\"{A}tan({k}x+{c})\")\n    elif fn==\"A*sin(kx+c)\":\n        plt.plot(x,A*(numpy.sin((k*x)+c)),color=Colour)\n        plt.ylabel(f\"{A}sin({k}x+{c})\")\n    else:\n        plt.plot(x,A*(numpy.cos((k*x)+c)),color=Colour)\n        plt.ylabel(f\"{A}cos({k}x+{c})\")\n    plt.xlabel(\"X-axis\")\n    \n    return fig\nThis is how the webpage looks: \nLetâ€™s take a look at the function definition line of the above program:\ndef Plot_Graphs(Function: funix.hint.Literal['A*tan(kx+c)', 'A*sin(kx+c)', \"A*cos(kx+c)\"],A: funix.hint.FloatSlider(0, 8, 0.1), k: funix.hint.FloatSlider(0, 10, 0.1), c: funix.hint.FloatSlider(0, 2*numpy.pi, 0.01),Colour: funix.hint.Literal['Blue', 'Green', 'Red','Black','Purple']) -&gt; matplotlib.figure.Figure:\nThe -&gt;matplotlib.figure.Figure: specifies that the function has to return a matplotlib.figure.Figure object.\nIn the following line: A: funix.hint.FloatSlider(0, 8, 0.1), k: funix.hint.FloatSlider(0, 10, 0.1), c: funix.hint.FloatSlider(0, 2*numpy.pi, 0.01) A, k, and c are the float values set using the slider in the webpage.\nSimilarly in Function: funix.hint.Literal['A*tan(kx+c)', 'A*sin(kx+c)', \"A*cos(kx+c)\"] the variable Function stores the string variable chosen using the circle checkboxes in the webpage."
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisation",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Template",
    "section": "",
    "text": "Quarto template Text!"
  }
]